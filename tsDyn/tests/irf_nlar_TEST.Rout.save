
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tsDyn)
> suppressMessages(library(tidyverse))
> suppressWarnings(RNGversion("3.5.3"))
> 
> ############################
> ### Load data
> ############################
> path_mod_uni <- system.file("inst/testdata/models_univariate.rds", package = "tsDyn")
> if(path_mod_uni=="") path_mod_uni <- system.file("testdata/models_univariate.rds", package = "tsDyn")
> 
> models_univariate <- readRDS(path_mod_uni)
> 
> ############################
> ### Test irf univariate
> ############################
> 
> 
> ## boot: many models instable! had to search for a while to find seed with no errors...
> df_regs <-  tibble(model = c("linear", "setar", "setar"),
+                        regime = c("all", "L", "H"))
> models_irf <- models_univariate %>% 
+   filter(!model %in% c("aar", "lstar" )) %>% 
+   left_join(df_regs, by = "model") %>% 
+   mutate(irf = map2(object, regime,  ~suppressWarnings(irf(.x,  boot = TRUE, runs = 5, seed = 7, regime = .y))))
> 
> ## IRF
> df_irf <- map_df(models_irf$irf, ~ head(.$irf[[1]], 2) %>%  as_tibble) %>% 
+   as.data.frame()
> 
> ## Lower
> df_all <- models_irf %>% 
+   mutate(irf_irf = map(irf, ~ head(.$irf[[1]], 5)),
+          irf_low = map(irf, ~ head(.$Lower[[1]], 5)),
+          irf_upp = map(irf, ~ head(.$Upper[[1]], 5))) %>% 
+   select(-irf) %>% 
+   gather(irf_stat, value, irf_irf, irf_low, irf_upp) %>% 
+   mutate(value = map(value, ~tibble(x=.) %>% 
+                           mutate(n.ahead = 0:4))) %>% 
+   select(-object) %>% 
+   unnest(value) %>% 
+   spread(irf_stat, x)
> 
> df_all %>% 
+   filter(n.ahead %in% c( 1)) %>% 
+   as_tibble()
# A tibble: 56 x 10
     lag include model  nthresh thDelay regime n.ahead irf_irf irf_low irf_upp
   <dbl> <chr>   <chr>    <int>   <int> <chr>    <int>   <dbl>   <dbl>   <dbl>
 1     1 both    linear      NA      NA all          1   0.529  0.325    0.620
 2     1 both    setar        1       0 H            1   0.527 -0.564    0.566
 3     1 both    setar        1       0 L            1   0.883 -3.27    -0.294
 4     1 both    setar        2       0 H            1   0.935  0.464    1.06 
 5     1 both    setar        2       0 L            1  -0.358 -1.20    -0.697
 6     1 const   linear      NA      NA all          1   0.586  0.362    0.714
 7     1 const   setar        1       0 H            1   0.910  0.290    1.27 
 8     1 const   setar        1       0 L            1   0.944  0.184    2.09 
 9     1 const   setar        2       0 H            1   1.02  -0.0806   1.11 
10     1 const   setar        2       0 L            1   0.193 -0.643    2.32 
# â€¦ with 46 more rows
> 
> 
> df_all %>% 
+   mutate(is_in = irf_irf >= irf_low & irf_irf <= irf_upp) %>% 
+   count(model, regime, is_in)
# A tibble: 6 x 4
  model  regime is_in     n
  <chr>  <chr>  <lgl> <int>
1 linear all    FALSE     2
2 linear all    TRUE     38
3 setar  H      FALSE    10
4 setar  H      TRUE    110
5 setar  L      FALSE     9
6 setar  L      TRUE    111
> 
> 
> ## try plot
> irf_1 <- irf(models_univariate$object[[1]])
> irf_10 <- irf(models_univariate$object[[10]])
There were 50 or more warnings (use warnings() to see the first 50)
> plot(irf_1)
> plot(irf_10)
> 
> proc.time()
   user  system elapsed 
 12.155   0.252  13.022 
