
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tsDyn)
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.1.0     ✔ purrr   0.2.5
✔ tibble  2.0.0     ✔ dplyr   0.7.7
✔ tidyr   0.8.2     ✔ stringr 1.3.1
✔ readr   1.3.1     ✔ forcats 0.3.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> 
> ############################
> ### Load data
> ############################
> path_mod_uni <- system.file("inst/testdata/models_univariate.rds", package = "tsDyn")
> if(path_mod_uni=="") path_mod_uni <- system.file("testdata/models_univariate.rds", package = "tsDyn")
> 
> models_univariate <- readRDS(path_mod_uni)
> 
> ############################
> ### Test irf univariate
> ############################
> 
> 
> ## boot: many models instable! had to search for a while to find seed with no errors...
> models_irf <- models_univariate %>% 
+   filter(!model %in% c("aar", "lstar" )) %>% 
+   mutate(irf = map(object, ~suppressWarnings(irf(.,  boot = TRUE, runs = 2, seed = 7))))
> 
> ## IRF
> df_irf <- map_df(models_irf$irf, ~ head(.$irf[[1]], 2) %>%  as_tibble) %>% 
+   as.data.frame()
> 
> ## Lower
> df_low <- map_df(models_irf$irf, ~ head(.$Lower[[1]], 2) %>%  as_tibble) %>% 
+   as.data.frame()
> df_upp <- map_df(models_irf$irf, ~ head(.$Upper[[1]], 2) %>%  as_tibble) %>% 
+   as.data.frame()
> 
> cbind(df_irf, df_low, df_upp)
            x           x          x
1   1.0000000  1.00000000  1.0000000
2   0.5290559  0.52650366  0.6381170
3   1.0000000  1.00000000  1.0000000
4   0.5859870  0.60126049  0.7345181
5   1.0000000  1.00000000  1.0000000
6   0.9836385  0.92734558  0.9850681
7   1.0000000  1.00000000  1.0000000
8   0.8954487  0.82911949  0.9138948
9   1.0000000  1.00000000  1.0000000
10  0.6590824  0.45036176  0.7216605
11  1.0000000  1.00000000  1.0000000
12  0.7110028  0.49818014  0.8181464
13  1.0000000  1.00000000  1.0000000
14  0.9529903  0.80217084  1.0083311
15  1.0000000  1.00000000  1.0000000
16  0.8966971  0.78543460  0.8995189
17  1.0000000  1.00000000  1.0000000
18  0.8829112  0.62891428  2.6692864
19  1.0000000  1.00000000  1.0000000
20 -0.3576188 -1.93084693 -1.0072760
21  1.0000000  1.00000000  1.0000000
22  0.9441860  1.04619616  1.1233426
23  1.0000000  1.00000000  1.0000000
24  0.1925287 -0.02834605  0.4363809
25  1.0000000  1.00000000  1.0000000
26  1.1985522  1.14689267  1.2301509
27  1.0000000  1.00000000  1.0000000
28  1.1681179  1.09523285  1.1148170
29  1.0000000  1.00000000  1.0000000
30  1.6838723  1.69469239  1.8172050
31  1.0000000  1.00000000  1.0000000
32  1.3321844  1.21758989  1.4319230
33  1.0000000  1.00000000  1.0000000
34  1.4846455 -0.26592730  0.9643356
35  1.0000000  1.00000000  1.0000000
36  1.6654367  0.49746872  0.5822903
37  1.0000000  1.00000000  1.0000000
38 -0.5517492 -1.71986408 -1.3238861
39  1.0000000  1.00000000  1.0000000
40  0.9565823  0.74580933  1.0261232
41  1.0000000  1.00000000  1.0000000
42  1.1279944  0.79076127  0.9354959
43  1.0000000  1.00000000  1.0000000
44  1.1306673 -0.74128625  1.1747637
45  1.0000000  1.00000000  1.0000000
46  1.1158326  0.88481663  2.1117343
47  1.0000000  1.00000000  1.0000000
48  0.7452092  0.46926333  0.7470556
49  1.0000000  1.00000000  1.0000000
50  1.4153645  1.15169555  1.1827358
51  1.0000000  1.00000000  1.0000000
52  0.7648152  0.61287525  0.9818158
53  1.0000000  1.00000000  1.0000000
54  1.0540197  0.87709658  1.6150107
55  1.0000000  1.00000000  1.0000000
56  0.7648152  0.89730519  1.3523611
57  1.0000000  1.00000000  1.0000000
58  2.2465299  2.17398910  2.4361098
59  1.0000000  1.00000000  1.0000000
60  0.7006092  0.61329659  0.6163614
61  1.0000000  1.00000000  1.0000000
62  0.5001720  0.20332972  0.9465450
63  1.0000000  1.00000000  1.0000000
64  1.0595660  0.70367337  0.7999734
> 
> proc.time()
   user  system elapsed 
  2.609   0.090   2.685 
