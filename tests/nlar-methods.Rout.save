
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tsDyn)
> 
> x <- log10(lynx)
> 
> ### Estimate models
> mod <- list()
> mod[["linear"]] <- linear(x, m=2)
> mod[["setar"]] <- setar(x, m=2, thDelay=1)
Warning message:
Possible unit root in the high  regime. Roots are: 0.9943 0.9943 
> mod[["lstar"]] <- lstar(x, m=2, thDelay=1)
Using maximum autoregressive order for low regime: mL = 2 
Using maximum autoregressive order for high regime: mH = 2 
Performing grid search for starting values...
Starting values fixed: gamma =  11.15385 , th =  3.337486 ; SSE =  4.337664 
Optimization algorithm converged
Optimized values fixed for regime 2  : gamma =  11.15383 , th =  3.339199 ; SSE =  4.337643 
> mod[["aar"]] <- aar(x, m=2)
> 
> 
> ### Extract methods
> sapply(mod, AIC)
   linear     setar     lstar       aar 
-333.8737 -358.3740 -356.6509 -328.0813 
> sapply(mod, BIC)
   linear     setar     lstar       aar 
-325.6651 -339.2206 -334.7613 -276.0935 
> sapply(mod, mse)
    linear      setar      lstar        aar 
0.05072439 0.03814203 0.03804950 0.04030663 
> sapply(mod, MAPE)
    linear      setar      lstar        aar 
0.06801955 0.05648596 0.05580035 0.05951108 
> 
> sapply(mod, coef)
$linear
     const      phi.1      phi.2 
 1.0576005  1.3842377 -0.7477757 

$setar
   const L     phiL.1     phiL.2    const H     phiH.1     phiH.2         th 
 0.5884369  1.2642793 -0.4284292  1.1656919  1.5992541 -1.0115755  3.3100557 

$lstar
   const.L     phiL.1     phiL.2    const.H     phiH.1     phiH.2      gamma 
 0.4891014  1.2465399 -0.3664328 -1.0240758  0.4232669 -0.2546088 11.1538344 
        th 
 3.3391985 

$aar
(Intercept)   s(V1.0).1   s(V1.0).2   s(V1.0).3   s(V1.0).4   s(V1.0).5 
 2.91144117 -0.36498170  0.01351412  0.15042344  0.46192130  0.69842899 
  s(V1.0).6   s(V1.0).7   s(V1.0).8   s(V1.0).9  s(V1..1).1  s(V1..1).2 
 0.92642399  1.21227229  1.52942321  1.52021867  0.24288150  0.15368199 
 s(V1..1).3  s(V1..1).4  s(V1..1).5  s(V1..1).6  s(V1..1).7  s(V1..1).8 
 0.05293481 -0.05580803 -0.19975355 -0.42491643 -0.61782536 -0.81698171 
 s(V1..1).9 
-0.95424576 

> sapply(mod, function(x) head(residuals(x)))
          linear       setar       lstar         aar
[1,]          NA          NA          NA          NA
[2,]          NA          NA          NA          NA
[3,]  0.05686638  0.05077340  0.04395966  0.03301780
[4,] -0.07368020 -0.07301664 -0.07994243 -0.10249452
[5,]  0.11071953  0.04888145  0.02963628  0.02850267
[6,]  0.20491541  0.11531771  0.09356303  0.11476657
> 
> 
> lapply(mod, predict, n.ahead=10)
$linear
Time Series:
Start = 1935 
End = 1944 
Frequency = 1 
 [1] 3.384622 3.102350 2.821052 2.642745 2.606274 2.689122 2.831076 2.965623
 [9] 3.045717 3.055977

$setar
Time Series:
Start = 1935 
End = 1944 
Frequency = 1 
 [1] 3.348576 2.949075 2.494675 2.478933 2.653709 2.881419 3.094429 3.266175
 [9] 3.392051 3.477612

$lstar
Time Series:
Start = 1935 
End = 1944 
Frequency = 1 
 [1] 3.346300 2.913213 2.560114 2.607046 2.800682 3.024814 3.232268 3.397452
 [9] 3.444542 3.254686

$aar
Time Series:
Start = 1935 
End = 1944 
Frequency = 1 
 [1] 3.360676 2.982792 2.645410 2.586847 2.736918 2.964137 3.191294 3.347509
 [9] 3.354504 3.188338

> 
> 
> ### Pred Roll, acc_stat:
> x_small <- x[1:100]
> mod_small <- list()
> mod_small[["linear"]] <- linear(x_small, m=2)
> mod_small[["setar"]] <- setar(x_small, m=2, thDelay=1, th=getTh(mod[["setar"]]))
Warning message:
Possible unit root in the high  regime. Roots are: 1 1 
> mod_small[["lstar"]] <- lstar(x_small, m=2, thDelay=1, th=getTh(mod[["lstar"]]), gamma=coef(mod[["lstar"]])["gamma"])
Using maximum autoregressive order for low regime: mL = 2 
Using maximum autoregressive order for high regime: mH = 2 
Convergence problem code 1. You might want to increase maximum number of iterations by setting 'control=list(maxit=1000)'
Optimized values fixed for regime 2  : gamma =  11.03044 , th =  3.340471 ; SSE =  4.269542 
> mod_small[["aar"]] <- aar(x_small, m=2)
> 
> pred_rolls_1 <- lapply(mod_small, predict_rolling, n.ahead=1, newdata=x[101:114])
> sapply(pred_rolls_1, function(x) x$pred[[1]])
        linear    setar    lstar      aar
 [1,] 2.449169 2.342137 2.324301 2.326990
 [2,] 2.801369 2.697924 2.683048 2.700009
 [3,] 2.889222 2.862200 2.863382 2.885772
 [4,] 3.332712 3.330000 3.338820 3.383900
 [5,] 3.451233 3.554839 3.570747 3.536110
 [6,] 3.432912 3.417157 3.431750 3.432964
 [7,] 3.189822 3.113776 3.082955 3.116714
 [8,] 2.866751 2.752102 2.736573 2.803772
 [9,] 2.438809 2.662520 2.605173 2.478764
[10,] 2.733730 2.813357 2.834554 2.815797
[11,] 2.948166 2.999893 3.017057 3.018300
[12,] 3.093844 3.167923 3.189365 3.178690
[13,] 3.237219 3.345161 3.365831 3.318405
[14,] 3.393691 3.540102 3.509327 3.445134
> sapply(pred_rolls_1, accuracy_stat)
     linear     setar      lstar      aar       
var  factor,1   factor,1   factor,1   factor,1  
ME   0.05258699 0.02826967 0.03157037 0.03953898
RMSE 0.1328027  0.06883358 0.07072864 0.09035348
MAE  0.1148975  0.0477577  0.05207567 0.067775  
MPE  1.478991   0.8449191  0.9954425  1.241795  
MAPE 3.886218   1.57141    1.736354   2.294182  
> 
> 
> pred_rolls_12 <- lapply(mod_small, predict_rolling, n.ahead=1:2, newdata=x[101:114])
> sapply(pred_rolls_12, function(x) x$pred[[1]])
        linear    setar    lstar      aar
 [1,] 2.449169 2.342137 2.324301 2.326990
 [2,] 2.801369 2.697924 2.683048 2.700009
 [3,] 2.889222 2.862200 2.863382 2.885772
 [4,] 3.332712 3.330000 3.338820 3.383900
 [5,] 3.451233 3.554839 3.570747 3.536110
 [6,] 3.432912 3.417157 3.431750 3.432964
 [7,] 3.189822 3.113776 3.082955 3.116714
 [8,] 2.866751 2.752102 2.736573 2.803772
 [9,] 2.438809 2.662520 2.605173 2.478764
[10,] 2.733730 2.813357 2.834554 2.815797
[11,] 2.948166 2.999893 3.017057 3.018300
[12,] 3.093844 3.167923 3.189365 3.178690
[13,] 3.237219 3.345161 3.365831 3.318405
[14,] 3.393691 3.540102 3.509327 3.445134
[15,] 2.769011 2.521265 2.481914 2.487292
[16,] 2.924473 2.675607 2.638771 2.657630
[17,] 3.165373 2.984457 2.965647 3.016514
[18,] 3.105854 3.088332 3.101479 3.152158
[19,] 3.377850 3.484268 3.511201 3.533075
[20,] 3.292461 3.419838 3.458278 3.407461
[21,] 3.142011 3.033462 3.024515 3.065340
[22,] 2.871090 2.636055 2.572339 2.704950
[23,] 2.636274 2.698643 2.622371 2.586239
[24,] 2.393450 2.784074 2.734128 2.544266
[25,] 2.828102 2.990434 3.034126 3.011475
[26,] 3.022416 3.167788 3.210641 3.204061
[27,] 3.089008 3.302950 3.350724 3.286149
[28,] 3.135763 3.440191 3.431994 3.289626
> lapply(pred_rolls_12, accuracy_stat)
$linear
  var         ME      RMSE       MAE      MPE     MAPE n.ahead
1   x 0.05258699 0.1328027 0.1148975 1.478991 3.886218       1
2   x 0.08869508 0.2623455 0.2303860 2.150715 7.700665       2
3   x 0.07064104 0.1975741 0.1726418 1.814853 5.793442     all

$setar
      var         ME       RMSE        MAE       MPE     MAPE n.ahead
1 x_small 0.02826967 0.06883358 0.04775770 0.8449191 1.571410       1
2 x_small 0.05482161 0.11615818 0.09038796 1.4996555 2.955445       2
3 x_small 0.04154564 0.09249588 0.06907283 1.1722873 2.263427     all

$lstar
      var         ME       RMSE        MAE       MPE     MAPE n.ahead
1 x_small 0.03157037 0.07072864 0.05207567 0.9954425 1.736354       1
2 x_small 0.06119571 0.11465237 0.09023093 1.8366383 2.987023       2
3 x_small 0.04638304 0.09269050 0.07115330 1.4160404 2.361689     all

$aar
  var         ME       RMSE        MAE      MPE     MAPE n.ahead
1   x 0.03953898 0.09035348 0.06777500 1.241795 2.294182       1
2   x 0.07490225 0.13588307 0.10322410 2.232238 3.381539       2
3   x 0.05722061 0.11311828 0.08549955 1.737016 2.837860     all

> 
> 
> proc.time()
utilisateur     système      écoulé 
     17.210       0.220      17.438 
